from flask import Flask, request, jsonify
import os
from dotenv import load_dotenv
from google import genai # Correct import
from google.genai import types # Import types for GenerateContentConfig

load_dotenv()  # Load environment variables from .env file

app = Flask(__name__)

# Initialize Gemini client with API key
client = genai.Client(api_key=os.environ.get("GOOGLE_API_KEY"))

@app.route('/summarize', methods=['POST'])
def summarize_text():
    """
    Receives text content and returns a summary generated by Gemini.
    """
    if not os.environ.get("GOOGLE_API_KEY"):
         return jsonify({"error": "Gemini API key not configured."}), 500

    data = request.get_json()
    if not data or 'text' not in data:
        return jsonify({"error": "Invalid request body. 'text' field is required."}), 400

    text_to_summarize = data['text']

    try:
        # Use client.models.generate_content for summarization
        # Employing prompt engineering using system instruction
        response = client.models.generate_content(
            model="gemini-1.5-flash-latest", # Or another suitable Gemini model
            contents=text_to_summarize,
            config=types.GenerateContentConfig( # Use config parameter
                system_instruction="Please summarize the provided text concisely, focusing on the main points."
            )
        )
        if response.text is not None:
            summary = response.text.strip()
            return jsonify({"summary": summary}), 200
        else:
            # Handle cases where no text is returned (e.g., due to safety filters)
            return jsonify({"error": "Gemini API did not return text content."}), 500

    except Exception as e:
        return jsonify({"error": str(e)}), 500

if __name__ == '__main__':
    app.run(debug=True)
